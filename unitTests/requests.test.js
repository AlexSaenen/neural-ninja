'use strict';

const request = require('request');
const expect = require('chai').expect;
const optimist = require('optimist');

function __getApiKey__() {
    return "skynetSuperSecretApiKey";
}

const lineCommands = optimist.argv;
const skynetApiUrl = lineCommands.docker ? 'http://dev.l0cal/' : 'http://localhost:8080/';

const trainingData = getTraining();
const predictData = getPredict();

describe('API', () => {
    describe('autoBuy/load', () => {
        it('should load successfully', (done) => {
            request.post({
                'url': `${skynetApiUrl}network/autoBuy/load`,
                'body': '{"skynetApiKey": "' + __getApiKey__() + '"}'
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.equal("Network autoBuy successfully loaded");
                done();
            });
        });
    });

    describe('autoBuy/start', () => {
        it('should start successfully', (done) => {
            request.post({
                'url': `${skynetApiUrl}network/autoBuy/start`,
                'body': '{"skynetApiKey": "' + __getApiKey__() + '"}'
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                done();
            });
        });
    });

    describe('autoBuy/train', () => {
        it('should return no error', (done) => {
            let result = {
                'meals': trainingData,
                'skynetApiKey': __getApiKey__()
            };

            request.post({
                'url': `${skynetApiUrl}network/autoBuy/train`,
                'body': JSON.stringify(result)
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.equal(null);
                done();
            });
        });
    });

    describe('autoBuy/unload', () => {
        it('should unload successfully', (done) => {
            request.post({
                'url': `${skynetApiUrl}network/autoBuy/unload`,
                'body': '{"skynetApiKey": "' + __getApiKey__() + '"}'
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.equal("Network autoBuy successfully unloaded");
                done();
            });
        });
    });

    describe('autoBuy/predict', () => {
        it('should not predict since autoBuy is unloaded', (done) => {
            let result = {
                'meals': predictData,
                'skynetApiKey': __getApiKey__()
            };

            request.post({
                'url': `${skynetApiUrl}network/autoBuy/predict`,
                'body': JSON.stringify(result)
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal("Network autoBuy is not running, predict cannot be executed");
                expect(body.answer).to.equal(null);
                done();
            });
        });
    });

    describe('autoBuy/load', () => {
        it('should load successfully', (done) => {
            request.post({
                'url': `${skynetApiUrl}network/autoBuy/load`,
                'body': '{"skynetApiKey": "' + __getApiKey__() + '"}'
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.equal("Network autoBuy successfully loaded");
                done();
            });
        });
    });

    describe('autoBuy/start', () => {
        it('should start successfully', (done) => {
            request.post({
                'url': `${skynetApiUrl}network/autoBuy/start`,
                'body': '{"skynetApiKey": "' + __getApiKey__() + '"}'
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                done();
            });
        });
    });

    describe('autoBuy/train', () => {
        it('should return no error', (done) => {
            let result = {
                'meals': trainingData,
                'skynetApiKey': __getApiKey__()
            };

            request.post({
                'url': `${skynetApiUrl}network/autoBuy/train`,
                'body': JSON.stringify(result)
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.equal(null);
                done();
            });
        });
    });

    describe('autoBuy/predict', () => {
        it('should return no error', (done) => {
            let result = {
                'meals': predictData,
                'skynetApiKey': __getApiKey__()
            };

            console.log("Waiting for 15 seconds to allow the engine to train...");

            setTimeout(() => {
                request.post({
                    'url': `${skynetApiUrl}network/autoBuy/predict`,
                    'body': JSON.stringify(result)
                }, (err, httpResponse, body) => {
                    body = JSON.parse(body);
                    console.log(body);
                    expect(err).to.equal(null);
                    expect(httpResponse.statusCode).to.equal(200);
                    expect(body.error).to.equal(null);
                    expect(body.answer).to.not.equal(null);
                    done();
                });
            }, 15000);
        });
    });

    describe('autoBuy/accuracy', () => {
        it('should return no error', (done) => {
            let result = {
                'meals': predictData,
                'skynetApiKey': __getApiKey__()
            };

            request.post({
                'url': `${skynetApiUrl}network/autoBuy/accuracy`,
                'body': JSON.stringify(result)
            }, (err, httpResponse, body) => {
                body = JSON.parse(body);
                console.log(body);
                expect(err).to.equal(null);
                expect(httpResponse.statusCode).to.equal(200);
                expect(body.error).to.equal(null);
                expect(body.answer).to.not.equal(null);
                done();
            });
        });
    });
});

function getPredict() {
    const batch = [];

    batch.push({autoBuyTrainingInput: [57, 48.50976682677441, 976, 123, 36, 21.36184473125268, 44060.39013193723, 46, 0.995], label: 1});
    batch.push({autoBuyTrainingInput: [37, 5.649254382817234, 24, 36, 59, 56.461698261944306, 8524.454400068484, 5, 0.891], label: 0});
    batch.push({autoBuyTrainingInput: [62, 33.02935573933368, 834, 213, 41, 13.592967196901581, 10436.560419762265, 31, 0.985], label: 1});
    batch.push({autoBuyTrainingInput: [8, 8.90904702500634, 985, 11, 6, 61.35389177442985, 1479.0547236647044, 2, 0.482], label: 0});
    batch.push({autoBuyTrainingInput: [70, 40.29732538470159, 570, 283, 41, 20.012464938302895, 16048.99387341568, 40, 0.974], label: 1});
    batch.push({autoBuyTrainingInput: [18, 15.79518043840841, 73, 44, 12, 76.53012193691404, 9212.728862449998, 14, 0.168], label: 0});
    batch.push({autoBuyTrainingInput: [46, 3.062344171899667, 630, 15, 51, 97.85195933584723, 6313.407876490571, 2, 0.202], label: 0});
    batch.push({autoBuyTrainingInput: [83, 43.972923580822176, 310, 152, 68, 22.144072254606172, 38140.33246347068, 43, 0.993], label: 1});
    batch.push({autoBuyTrainingInput: [49, 22.264351201506116, 98, 44, 99, 94.3893865034345, 3033.4632697023167, 17, 0.373], label: 0});
    batch.push({autoBuyTrainingInput: [28, 9.257915334159444, 589, 16, 22, 50.248406430799406, 8249.722491376338, 3, 0.139], label: 0});
    batch.push({autoBuyTrainingInput: [84, 49.42832004659286, 463, 90, 10, 0.8049678887080292, 95868.44624502126, 47, 0.983], label: 1});
    batch.push({autoBuyTrainingInput: [83, 36.27372335198851, 950, 292, 74, 1.4305687943326895, 55836.798089082775, 35, 0.967], label: 1});

    return batch;
}


function getTraining() {
    const batch = [];

    let carts = [
        [57, 48.50976682677441, 976, 123, 36, 21.36184473125268, 44060.39013193723, 46, 0.995],
        [50, 49.01148035281602, 773, 84, 84, 29.49744658842593, 92488.08827998531, 46, 0.996],
        [83, 49.03366643088836, 437, 153, 82, 28.091169600105708, 91750.99254269099, 48, 0.99],
        [37, 5.649254382817234, 24, 36, 59, 56.461698261944306, 8524.454400068484, 5, 0.891],
        [90, 27.798840030780426, 185, 225, 84, 18.106231767123415, 31562.076415486397, 27, 0.955],
        [8, 22.69171759107895, 118, 11, 50, 77.38100701742286, 7040.192057374793, 2, 0.309],
        [47, 8.059335875841361, 436, 29, 47, 42.74295211831447, 3296.5361873631336, 4, 0.602],
        [50, 32.270551005113475, 426, 213, 18, 6.86891185883958, 44601.65444590778, 30, 0.958],
        [86, 43.40954208678787, 160, 120, 67, 5.211170714637775, 23295.191735112854, 42, 0.971],
        [98, 38.348795821283304, 497, 91, 38, 3.5900638227539994, 98822.69102032275, 37, 0.96],
        [62, 33.02935573933368, 834, 213, 41, 13.592967196901581, 10436.560419762265, 31, 0.985],
        [8, 8.90904702500634, 985, 11, 6, 61.35389177442985, 1479.0547236647044, 2, 0.482],
        [70, 40.29732538470159, 570, 283, 41, 20.012464938302895, 16048.99387341568, 40, 0.974],
        [18, 15.79518043840841, 73, 44, 12, 76.53012193691404, 9212.728862449998, 14, 0.168],
        [46, 3.062344171899667, 630, 15, 51, 97.85195933584723, 6313.407876490571, 2, 0.202],
        [83, 43.972923580822176, 310, 152, 68, 22.144072254606172, 38140.33246347068, 43, 0.993],
        [49, 22.264351201506116, 98, 44, 99, 94.3893865034345, 3033.4632697023167, 17, 0.373],
        [28, 9.257915334159444, 589, 16, 22, 50.248406430799406, 8249.722491376338, 3, 0.139],
        [84, 49.42832004659286, 463, 90, 10, 0.8049678887080292, 95868.44624502126, 47, 0.983],
        [83, 36.27372335198851, 950, 292, 74, 1.4305687943326895, 55836.798089082775, 35, 0.967],
        [88, 31.279236879202593, 896, 162, 72, 24.808460474432867, 70370.09131889977, 30, 0.951],
        [86, 44.70443116765999, 810, 85, 8, 1.166167083253704, 46436.169174195355, 43, 0.978],
        [92, 40.56777700584497, 199, 206, 14, 28.732174245334996, 55755.284573314624, 38, 1.0],
        [23, 7.398721093398464, 197, 49, 95, 86.56862302235123, 5012.105878258516, 2, 0.76],
        [79, 35.7661014089864, 144, 265, 90, 29.958587236414076, 12029.383405853448, 34, 0.969],
        [15, 7.210261393274234, 212, 29, 74, 92.11832413088139, 9548.843542425011, 1, 0.912],
        [67, 45.40053574371178, 496, 86, 88, 23.231044337917986, 95342.48562851729, 44, 0.953],
        [62, 47.014064154381, 478, 206, 63, 3.0198910785715105, 55225.04606735886, 46, 0.982],
        [95, 49.31063720497154, 7, 96, 1, 10.691227874574645, 63082.55141959831, 46, 0.995],
        [92, 47.19202905366822, 471, 282, 96, 25.761880872891307, 40160.89550784914, 46, 0.992],
        [75, 35.646720035494596, 219, 53, 48, 28.118598980783865, 21507.118258854534, 34, 0.993],
        [68, 31.642875676120255, 945, 262, 45, 13.569006242659054, 30781.21016242706, 30, 0.968],
        [54, 37.926443625427, 221, 237, 4, 18.52051374794486, 41298.38393728333, 36, 0.954],
        [61, 29.18080647567485, 109, 251, 50, 8.566498432659285, 85463.61963686244, 28, 0.998],
        [70, 35.603757244341494, 294, 128, 91, 15.57425768151032, 24587.96054790984, 34, 0.956],
        [70, 48.48305255696758, 608, 134, 0, 29.064198367242316, 33400.71592511068, 48, 0.997],
        [51, 25.236316231551637, 754, 73, 73, 13.976451333937312, 91192.31224237203, 24, 0.961],
        [56, 40.173917224818055, 653, 66, 43, 2.146145598336214, 56047.59706463858, 39, 0.972],
        [96, 38.75463434981159, 880, 70, 51, 19.29365383692007, 80694.53503940791, 36, 0.957],
        [100, 32.6371053506169, 450, 280, 92, 2.58544171503598, 97239.6607021496, 31, 0.96],
        [54, 29.142925260545184, 830, 235, 29, 21.25202406547295, 15569.713517458022, 27, 0.972],
        [72, 37.456974639487036, 779, 80, 91, 13.684629959142802, 48348.14697748687, 36, 0.99],
        [83, 46.68368045882996, 498, 148, 47, 0.5616946015785562, 92636.33558133164, 46, 0.981],
        [58, 41.72903296587499, 984, 141, 53, 22.536760024446867, 34879.51032029044, 40, 0.957],
        [27, 4.722540134059871, 330, 45, 7, 83.55315322215075, 5472.533691204683, 0, 0.419],
        [53, 43.115432322485475, 620, 92, 25, 19.27780125042708, 94417.38268786254, 42, 0.987],
        [88, 32.81530973191587, 76, 233, 91, 7.047933734976825, 80408.47359216839, 32, 0.994],
        [92, 33.24522564619319, 540, 272, 64, 14.399509969494083, 57505.4963680723, 32, 0.951],
        [83, 29.047810288738567, 172, 151, 69, 24.28462229538116, 95617.94371058677, 27, 0.994],
        [1, 5.564949462342233, 534, 8, 86, 64.23538314272426, 4217.2344399451085, 4, 0.295],
        [36, 8.149464802168826, 742, 39, 52, 85.47122427213921, 7062.906133352901, 4, 0.821],
        [58, 26.111938614811166, 46, 147, 4, 23.472205732971243, 90650.20689664081, 25, 0.998],
        [11, 24.23152997615728, 741, 21, 75, 85.13178313836515, 2198.717390576619, 1, 0.722],
        [18, 5.314952083943744, 487, 16, 51, 54.067949501370265, 882.5102734805201, 4, 0.748],
        [87, 36.01019561294184, 322, 208, 10, 13.241938220775324, 45786.53123880708, 34, 0.98],
        [83, 35.54624287510012, 123, 173, 86, 8.743313626993588, 42946.02371183981, 34, 0.974],
        [0, 6.6679195749680895, 462, 32, 69, 48.737763167713666, 3590.851871401405, 2, 0.666],
        [77, 44.91385434653952, 544, 78, 39, 28.514515428711864, 65112.48197437333, 42, 0.968],
        [97, 43.835889086387155, 171, 229, 18, 21.814961123616893, 35573.66661514662, 42, 0.961],
        [89, 28.822796776733117, 514, 105, 49, 29.81689099624882, 68330.16322359545, 27, 0.981],
        [62, 47.34872643987956, 165, 149, 91, 0.5372661516600885, 40813.300603460404, 45, 0.957],
        [50, 47.18864907132959, 813, 288, 84, 15.317288790004639, 80721.3133468256, 46, 0.984],
        [81, 29.16022427115061, 553, 201, 94, 2.020925817895751, 44562.74463758253, 28, 0.963],
        [65, 33.696872304294644, 728, 190, 99, 1.245986622670362, 99973.63360764814, 32, 0.992],
        [49, 5.168465732060803, 750, 21, 35, 57.185119312838296, 8038.0230554771715, 3, 0.728],
        [61, 36.6473879020708, 915, 94, 96, 1.4652544468109197, 95913.82609846459, 35, 0.977],
        [61, 44.94110683237822, 595, 268, 78, 26.5910061270194, 22986.021061529533, 44, 0.992],
        [87, 34.8849468600107, 4, 161, 2, 28.92857542818245, 21548.40860639866, 34, 0.989],
        [1, 15.18867006550584, 385, 44, 63, 74.48148488463009, 9626.59028010875, 12, 0.034],
        [67, 42.536000984939776, 874, 193, 88, 15.600467890569366, 56130.49069048729, 41, 0.974],
        [91, 28.191265879990432, 16, 265, 60, 19.914889928360395, 51903.79580946706, 26, 0.99],
        [65, 42.27086389448653, 898, 86, 14, 2.490024144851244, 82676.00364295823, 41, 0.997],
        [68, 48.6511649734356, 976, 146, 88, 26.340977828972186, 75814.12059553342, 47, 0.959],
        [66, 39.444427579299735, 260, 104, 75, 0.13553784958143078, 34460.17932272418, 38, 0.994],
        [93, 42.1501053442735, 584, 101, 10, 23.696955418476136, 51488.28142248441, 41, 0.994],
        [69, 25.463253556857488, 911, 140, 84, 16.51241637522278, 29815.394738933457, 24, 0.987],
        [51, 36.63184731327505, 818, 167, 8, 4.8565573001952504, 59497.63093706901, 34, 0.99],
        [97, 39.772457077657045, 257, 113, 44, 3.4951327024109444, 76503.82091701376, 38, 0.972],
        [65, 44.07738727431766, 610, 155, 87, 7.546861832382144, 60620.11793111524, 42, 0.969],
        [96, 45.89455318154013, 496, 146, 63, 14.327904688007285, 26065.186376838243, 44, 0.966],
        [64, 34.36862169485238, 501, 121, 47, 14.970043454396144, 46331.19711467826, 33, 0.964],
        [87, 28.53116069104629, 65, 179, 60, 12.23426505419495, 44411.665685230895, 27, 0.979],
        [88, 39.93050096037962, 446, 151, 70, 10.30971678319435, 55138.175382587564, 38, 0.977],
        [64, 27.80096848577874, 477, 286, 10, 26.856055722678803, 67848.21076408545, 26, 0.973],
        [60, 33.610000037032016, 238, 218, 40, 1.0703835305906784, 12252.785611658632, 31, 0.997],
        [61, 40.21089802582678, 799, 119, 42, 13.644772144616432, 39051.21650105936, 38, 0.953],
        [32, 22.503150687376845, 301, 47, 26, 89.44410970625562, 2583.048457586731, 0, 0.816],
        [100, 31.81500644325487, 239, 223, 78, 2.2541603333135973, 50019.470554576656, 31, 0.977],
        [10, 11.781846075862024, 765, 24, 7, 44.121372128465126, 156.87025566243017, 8, 0.203],
        [72, 41.980359665132404, 645, 111, 84, 3.1945390602566537, 35154.51430737602, 40, 0.981],
        [92, 28.063648649159127, 168, 259, 88, 10.545338599061717, 94734.86006402531, 26, 0.981],
        [51, 32.09111236071857, 439, 239, 84, 25.265750715745916, 80625.22644788794, 31, 0.961],
        [48, 15.352901173644756, 472, 34, 85, 31.909238919625164, 4772.858473010802, 3, 0.073],
        [82, 31.37982801332537, 572, 101, 5, 9.330641542179652, 64723.052786954584, 29, 0.975],
        [79, 34.12417410720174, 864, 135, 98, 8.43078874957956, 79845.67008484529, 33, 0.956],
        [70, 29.939059192888088, 401, 242, 87, 20.28163604801392, 30400.413747420018, 28, 0.956],
        [83, 40.46426648075826, 290, 225, 0, 6.205630461724909, 54519.975976669266, 40, 0.976],
        [94, 25.84147007627221, 768, 90, 58, 17.180400100002203, 82729.13478410656, 25, 0.956],
        [72, 43.957344266612104, 642, 65, 1, 14.777765629552432, 51895.26171944058, 43, 0.977],
        [68, 45.410520671908365, 290, 179, 55, 21.734663635129184, 29990.659958158027, 44, 0.977],
        [60, 39.43014596899664, 199, 298, 17, 27.169270070654, 47803.479481274146, 38, 0.968],
        [30, 24.22146701527442, 791, 8, 95, 99.78457773158688, 1894.9368167287673, 10, 0.041],
        [95, 45.06259280981345, 930, 296, 13, 23.37549342877067, 77767.12053096738, 43, 0.987],
        [50, 41.219497994655896, 285, 231, 51, 20.990332860218167, 39836.93872591971, 40, 0.976],
        [10, 17.58040013156437, 259, 50, 72, 56.041521347530015, 4886.7276230843845, 7, 0.143],
        [50, 42.391365360477266, 698, 53, 6, 24.92781745056052, 80067.22154056511, 42, 0.952],
        [19, 4.424373945042662, 759, 49, 41, 59.28323717921847, 6187.724875397881, 4, 0.437],
        [76, 42.38674170522334, 907, 186, 95, 10.555803427949712, 52812.831593341376, 40, 0.986],
        [83, 43.52444947772699, 912, 103, 56, 24.185213003810528, 74656.32799359242, 43, 0.965],
        [42, 14.26975099013804, 92, 45, 48, 53.93418685726909, 2387.27309904912, 11, 0.056],
        [39, 2.2249313115493914, 174, 30, 49, 80.35434716064344, 5235.321608796062, 1, 0.744],
        [54, 37.605237305193455, 32, 99, 51, 15.747965208486598, 37170.60315104244, 36, 0.973],
        [29, 11.25844970318125, 435, 28, 41, 98.6171378835013, 178.20990807618452, 4, 0.201],
        [0, 0.26059806528702933, 457, 33, 42, 83.6527027858869, 5221.773659624062, 0, 0.025],
        [83, 42.35722651972388, 774, 252, 34, 16.93381395259194, 45374.83850094036, 40, 0.953],
        [63, 45.8607023195866, 727, 104, 26, 9.100332501358137, 54121.382443951945, 44, 0.951],
        [49, 14.092606890621736, 867, 21, 78, 32.890255007767934, 7969.624277379685, 1, 0.4],
        [79, 46.8856776243156, 366, 275, 47, 10.846042955439763, 26172.237527370573, 45, 0.997],
        [81, 25.168105798907487, 809, 139, 22, 5.105037349524537, 90072.2889563082, 24, 0.985],
        [93, 46.32122357449173, 584, 275, 47, 26.785280235264633, 50838.98639826331, 45, 0.956],
        [7, 4.063264057287707, 766, 25, 83, 51.72363538574659, 2611.815380641137, 2, 0.362],
        [57, 37.00846182925903, 405, 174, 89, 10.79277908742914, 19029.640424764617, 36, 0.988],
        [93, 45.07372734688639, 235, 275, 58, 19.34608818844443, 15409.21204640144, 43, 0.957],
        [87, 48.220919144121794, 555, 163, 86, 10.500360616006581, 36819.654028351695, 48, 0.959],
        [86, 38.24090403360472, 972, 99, 4, 17.381615354503854, 32521.402794961763, 38, 0.992],
        [54, 49.76941404751399, 482, 168, 45, 17.121757369344135, 61711.40423690746, 47, 0.954],
        [86, 26.590627760976858, 85, 237, 26, 16.82721177691068, 13881.004219715323, 25, 0.958],
        [73, 30.026724819851687, 200, 63, 12, 3.518810298684303, 39697.57132973676, 29, 0.961],
        [3, 3.852740587682085, 391, 27, 24, 48.41921134148085, 8287.985283125554, 0, 0.832],
        [89, 46.222961950751504, 193, 91, 34, 11.436219872492643, 76677.30267953067, 44, 0.997],
        [68, 35.59360751308865, 981, 259, 91, 17.3052610138911, 62619.42304700758, 35, 0.967],
        [58, 38.931354608869185, 539, 79, 33, 9.748555322926622, 88659.98326244089, 38, 0.991],
        [61, 34.30698666961901, 304, 165, 99, 19.376199438645333, 32440.469640386855, 34, 0.991],
        [9, 19.93582055121001, 346, 32, 10, 72.77748736313501, 9542.113786733658, 10, 0.469],
        [69, 43.59959390379841, 205, 73, 72, 19.597452132888503, 87342.07712783944, 42, 0.996],
        [92, 31.139110857947674, 901, 130, 77, 26.093535293574735, 48324.62506398606, 30, 0.995],
        [53, 34.77883226645634, 606, 170, 43, 7.492966443127483, 13680.971313380844, 33, 0.982],
        [31, 2.69350063977819, 993, 9, 46, 63.842977374931685, 8607.29256225177, 2, 0.82],
        [67, 37.98305942053972, 552, 270, 42, 16.895677670669457, 32251.958316334796, 37, 0.974],
        [12, 13.274730106230884, 317, 30, 42, 61.97596724966228, 5525.506948586531, 6, 0.096],
        [75, 42.90547493831138, 484, 120, 13, 1.4345488852288801, 17687.887874631728, 41, 0.97],
        [78, 45.27413496142515, 843, 93, 21, 3.1124991129969093, 87178.02453822177, 43, 0.956],
        [0, 7.021146234059178, 243, 41, 20, 72.57186814698976, 3530.264580915183, 2, 0.722],
        [90, 25.840015302227577, 248, 266, 32, 14.305830186715696, 73255.10908399327, 24, 0.955],
        [93, 35.54400734662541, 334, 204, 3, 27.453281286810242, 87528.44246933724, 34, 0.985],
        [63, 27.33242850546641, 214, 264, 24, 21.73854412212229, 62546.63835282874, 26, 0.954],
        [78, 39.77417169763027, 525, 226, 98, 8.219418037078114, 16297.074334915767, 37, 0.961],
        [67, 42.26060869817819, 758, 134, 89, 17.67114773214044, 43989.577411560495, 41, 0.957],
        [49, 3.402169696035773, 900, 47, 72, 55.84482979375767, 9684.22492726454, 0, 0.174],
        [55, 46.97787233245131, 243, 185, 91, 6.722246044156881, 46022.2446784137, 45, 0.996],
        [89, 45.29245628515062, 175, 293, 63, 25.21414579537713, 23148.928774878143, 45, 0.964],
        [99, 32.358459903120185, 516, 254, 5, 9.667213447892436, 94016.09719514025, 31, 0.965],
        [51, 40.71822909769767, 409, 143, 37, 20.572356879676967, 76126.6139080211, 40, 0.952],
        [100, 42.93513069178768, 51, 79, 28, 0.06291334855724195, 95852.99563370443, 41, 0.984],
        [80, 42.4215990271774, 783, 70, 94, 15.653175751301097, 38796.196198733494, 41, 0.994],
        [64, 28.5532332924832, 499, 147, 90, 17.776967225829978, 96550.4283493645, 27, 0.979],
        [52, 37.72550852124485, 357, 62, 15, 7.00643401211638, 55051.0281936214, 36, 0.984],
        [79, 34.83367428802046, 952, 193, 72, 0.21321106702240633, 67223.30060149207, 33, 0.979],
        [96, 45.08104638025998, 535, 120, 20, 29.924544435938103, 47462.06631125725, 43, 0.986],
        [39, 24.351168605677735, 809, 13, 50, 83.79192433562369, 8250.608456590147, 15, 0.227],
        [55, 48.78975147878046, 78, 211, 91, 20.020481325708896, 14072.304177152064, 46, 0.965],
        [74, 30.91018522661141, 616, 169, 3, 3.268744251957043, 54563.372959200235, 30, 0.954],
        [95, 48.80950825961751, 811, 68, 19, 16.09014577004328, 28637.87547097151, 47, 1.0],
        [77, 40.1934586933265, 775, 95, 19, 28.256969420240026, 12678.621602946494, 39, 0.966],
        [2, 18.92245086320095, 182, 8, 33, 60.93975721147855, 9303.844858863562, 3, 0.236],
        [52, 32.58799434482278, 547, 112, 9, 23.157485240759495, 51247.649129354795, 32, 0.994],
        [87, 28.7496591597809, 681, 135, 29, 10.056818658920818, 46103.962919401994, 28, 0.964],
        [9, 11.969194661611759, 534, 4, 12, 35.83530414455834, 917.5013646578711, 1, 0.188],
        [59, 45.41806880315198, 17, 123, 42, 20.60867932694107, 10731.999907205058, 44, 0.972],
        [53, 47.09340248824307, 322, 185, 6, 12.2984465569422, 22586.763497843545, 44, 0.988],
        [83, 44.667591412822986, 768, 105, 50, 28.795378557318745, 48995.34223845421, 44, 0.992],
        [68, 38.48555221105295, 710, 87, 86, 13.3020766429969, 10887.350497254325, 38, 0.983],
        [78, 26.21578249957535, 867, 71, 11, 15.863555142986971, 70788.75414434269, 26, 0.973],
        [45, 7.457422963219288, 895, 26, 39, 94.22430612995745, 7585.513471549741, 2, 0.826],
        [73, 48.775207560221816, 591, 275, 97, 4.3155322401515, 32397.479541469107, 46, 0.969],
        [77, 47.81734226616895, 571, 82, 49, 10.222091479553056, 95974.27308592452, 45, 0.997],
        [17, 7.137126470366328, 580, 38, 83, 54.777925465839985, 9952.489312216658, 0, 0.708],
        [99, 46.24298596749536, 960, 197, 72, 17.08691365767678, 44305.16281315307, 44, 0.97],
        [81, 41.11619049582842, 266, 167, 12, 28.533969091284064, 84444.85957199243, 40, 0.996],
        [1, 6.35833066538013, 627, 19, 74, 92.62157566812134, 2118.0922109446155, 1, 0.255],
        [75, 27.71231907171794, 240, 140, 19, 10.94191446473095, 37081.02693805033, 26, 0.992],
        [55, 40.94441354379368, 555, 180, 31, 2.7067079144064996, 17126.0741024444, 40, 0.992],
        [71, 28.488339754685978, 793, 159, 32, 6.188700437128089, 95647.93678915841, 28, 0.96],
        [58, 46.42527329275981, 471, 227, 62, 21.554385845791227, 40316.00137172063, 44, 0.964],
        [69, 41.22159977627429, 857, 112, 43, 4.735557174125235, 41220.766106843505, 40, 0.959],
        [26, 14.718211451619862, 848, 42, 14, 72.9232111079944, 9709.696951845497, 12, 0.699],
        [90, 47.0384534439638, 426, 63, 67, 20.75419731208022, 67189.26148846865, 45, 0.991],
        [55, 46.07882615207113, 674, 226, 5, 4.036387756055819, 93592.97972475423, 45, 0.987],
        [42, 19.882086062527225, 236, 7, 7, 47.5554931016312, 2057.363626039682, 4, 0.52],
        [42, 6.233948400424117, 835, 34, 76, 98.81137860333118, 8088.937033852435, 4, 0.222],
        [48, 10.179342531106919, 336, 42, 22, 50.21930279342374, 7787.499144340607, 8, 0.767],
        [81, 49.385560944134085, 517, 133, 9, 20.653928647873993, 34516.129672677154, 48, 0.954],
        [72, 41.58130315089487, 647, 156, 23, 4.405302849838475, 16891.153680329273, 40, 0.969],
        [3, 13.401498754465258, 767, 16, 18, 99.06531649858147, 4399.865736452635, 0, 0.708],
        [71, 38.48360105087329, 858, 124, 69, 1.5821399678779502, 89497.54789082479, 37, 0.971],
        [93, 44.30792172673275, 520, 250, 5, 13.913811935136328, 78787.38669226038, 43, 0.989],
        [80, 43.71006342311304, 186, 186, 10, 2.000247225383065, 98788.02892037573, 43, 0.996],
        [50, 38.290243907528385, 129, 79, 12, 12.821886328659506, 33131.784460479845, 37, 0.99],
        [15, 13.618567981919242, 18, 13, 91, 65.42122493537201, 4883.499022678385, 12, 0.008],
        [83, 35.307985414529014, 379, 193, 98, 6.243001796938876, 78289.5798816926, 35, 0.963]];

    let labels = [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1];
    // let labels = [1];

    for (let idx in carts) {
        batch.push({autoBuyTrainingInput: carts[idx], label: labels[idx]});
    }

    return batch;
}
